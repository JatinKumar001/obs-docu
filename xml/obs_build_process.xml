<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha.obs.build_process"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" >
 <title>Build Process</title>
 <para>
  Each package build is created in a fresh environment. This is done to
  ensure that all dependencies are available and that every later build
  produces identical results.
 </para>
 <sect1 condition="tbd">
  <title>Definition of a Build Process</title>
  <para/>
  <remark>TBD</remark>
 </sect1>
 <sect1>
  <title>Phases of a Build Process</title>
  <para>
   All sources and binaries which are hosted inside &obs; are organized in
   projects. Projects host sources inside of &obsa; packages. The sources are
   build according to the repository configuration inside of the project.
  </para>
  <sect2>
   <title>Preinstall Phase</title>
   <remark>
    Sounds like bad English: Preinstallation Phase, Installation Phase,
    Packaging Phase would imo sound better. Not sure whether I can do that,
    or whether this is already part of the terminology canon. - sknorr,
    2017-08-25
   </remark>
   <para>
    This phase depends on the type of the buildroot (building
    environment). &obsa; supports three different types of buildroots:
   </para>
    <itemizedlist>
     <listitem>
      <para>
       chroot
      </para>
     </listitem>
     <listitem>
      <para>
       Xen
      </para>
     </listitem>
     <listitem>
      <para>
       KVM
      </para>
     </listitem>
    </itemizedlist> 
    <para>
    In the preinstall phase, the OBS Worker creates a small
    base system (chroot or VM Image) with manually extracted packages (file
    system, coreutils, binutils, rpm/debutils, etc.), copies all necessary
    build requirements into the base system. </para>
  </sect2>
  <sect2>
   <title>Install Phase</title>
   <para>
    Depending on the chosen build root, the worker starts a Xen or KVM
    virtual machine or enters the build root. If this was successful, the
    install phase reinstalls all base packages from above and additionally all
    packages you have defined in your build recipe. After this phase the
    environment is ready to process the build recipe.
   </para>
  </sect2>
  <sect2>
   <title>Package Build</title>
   <remark>
    FIXME: Terminology: Definition of buildroot? Is buildroot a command? I
    would have presumed this to be a location not a command or other type of
    active thingie. - sknorr, 2017-08-24
   </remark>
   <para>
    Depending on the type of package, the buildroot executes different build
    commands:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      RPM-based distributions: <command>rpmbuild</command>
     </para>
    </listitem>
    <listitem>
     <para>
      Debian-based distributions: <command>dpkg-buildpackage</command>
     </para>
    </listitem>
    <listitem>
     <para>
      Arch Linux: <command>pacman</command>.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    How the build continues depends on the quality and the type of your build
    recipe. In most cases, the source code will be compiled now and then be
    packed into the chosen package format.
   </para>
   <para>
    To improve package quality, on RPM-based distributions there are
    additional security checks and a linter called <command>rpmlint</command>.
   </para>
  </sect2>
  <sect2>
   <title>After the Build</title>
   <para>
    The generated packages are taken from the worker, are signed by the
    &obsa; signer and are published to the Repository.
   </para>
   <remark>
    FIXME: Terminology -- "signing server" instead of "signer"?
    - sknorr, 2017-08-24
   </remark>
  </sect2>
 </sect1>
 <sect1 condition="tbd">
  <title>Different Ways of Building</title>
  <para/>
  <remark>TBD</remark>
 </sect1>
 <sect1 condition="tbd">
  <title>Security Aspects</title>
  <para/>
  <remark>TBD</remark>
 </sect1>
 <sect1>
  <title>Identify a build</title>
  <para>
    &obsa; is usally tagging each build with an identifier. This can be used to find the building 
    &obsa; instance, the project, repository and exact source for a binary. This information is
    stored in some variable called DISTURL and is specified as 
     <command>obs://$OBS_INSTANCE/$PROJECT/$REPOSITORY/$SOURCE_REVISION-$PACKAGE(:$FLAVOR)</command>
    . Note that the last $:FLAVOR part is optional and exists only when the package was build using the multibuild feature.

    The source specified via the DISTURL can be accessed by pasting the URL into the search interface
    of the &obsa; web interface. Or use the command line tool to check it out:
    <screen>
     <command># osc checkout $DISTURL</command>
    </screen>
    You need to go to the right OBS instance as this is not handled automatically yet.
  </para>
  <sect2>
   <title>Read DISTURL from a rpm</title>
   <para>
    Rpm binaries contain the DISTURL as tag. It can be read from the rpm database for installed rpms and
    also from the rpm binaries itself.
    <screen>
     <command># rpm -q --qf '%{DISTRL}\n' $rpm</command>
    </screen>
   </para>
  </sect2>
  <sect2>
   <title>Read DISTURL from a container</title>
   <para>
    Containers store the DISTURL as label. You will see only the DISTURL from the highest layer via
    <screen>
     <command># docker inspect --format '{{.Config.Labels}}' $image_id</command>
    </screen>
    The disturl is always set via the key 'org.openbuildservice.disturl'.
   </para>
  </sect2>
 </sect1>
</chapter>
