<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha.obs.build_scheduling_and_dispatching"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Scheduling and Dispatching</title>
 <info/>
 <para> One of the major functionalities of OBS is to calculate always the
  current state, based on available sources, binaries and user configurations.
  In case a change happened it will trigger builds to achieve a clean state
  again. The calculation of the need of a build job is called scheduling here.
  The assignment of a build job to a concrete build host (aka worker) is called
  dispatching. </para>
 <sect1>
  <title>Definition of a Build Process</title>
  <para> A build process is calculated and executed based on the following </para>
  <itemizedlist>
   <listitem>
    <para> The sources of a package defined which dependencies are required at
     build time. For example, <parameter>BuildRequires</parameter> lines in spec files
     defined which other packages must get installed to build a package </para>
   </listitem>
   <listitem>
    <para> The project configuration of the package defines repositories and
     architectures to build for. In case other repositories are used as a base
     the configuration from there is also considered. </para>
   </listitem>
   <listitem>
    <para> Dependencies of packages which are required are considered as well.
    </para>
   </listitem>
   <listitem>
    <para> Constraints regarding the worker are considered. A package may
     require certain amount of resources or specific features to build. Check
     the constraints chapter for details. However, apart from this the build
     should be independent of the specific worker where the job gets dispatched
     to. </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1>
  <title>Scheduling Strategies</title>
  <para> The defaults have the goal of creating an always reproducible state.
   This may lead to more builds than practically necessary, but ensures that no
   hidden incompatibilities exist between packages and also that the same state
   can later be achieved again (with a subsequent rebuild of the same sources
   and configurations). This can also lead to multiple builds of the same
   package in the case of dependency loops. </para>
  <para> In some setups this may not be wanted, so each repository can be
   configured differently. The usual options to modify the project meta
   configurations can be used to configure different strategies. For example
   using osc:</para>
  <screen>osc meta prj -e YOUR_PROJECT</screen>
  <para>A repository is configured as following by default, however only the
   name attribute is required to be set.</para>
  <screen># Example &lt;repository
    name="standard" rebuild="transitive" block="all" linkedbuild="off"&gt; [...]
    &lt;/repository&gt; </screen>

  <sect2>
   <title>Build Trigger Setting</title>
   <para> The build trigger setting can be set via the "rebuild" attribute.
    Possible settings are </para>
   <variablelist>
    <varlistentry>
     <term>transitive</term>
     <listitem>
      <para> The default behavior, do a clean build of all dependant packages
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>direct</term>
     <listitem>
      <para> Just build the package with changed sources and direct dependant
       packages. But not indirect dependant packages. </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>local</term>
     <listitem>
      <para> Just build packages with changed sources. </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <note>
    <para> Note: You can run into dependency problems in case you select
      <parameter>direct</parameter> or <parameter>local</parameter> without
     noticing this in the build state. Your packages might not even be
     installable or have random runtime errors (like not starting up or
     crashing applications), even when they claim to be "succeeded". Also, you
     cannot be sure that you will be able to re-build them later. So never do
     an official shipment with this setting of a release. This knob is exposed
     to allow deliberate suppression of the strictly reproducible builds (for
     example, to limit burning CPU unnecessarily). </para>
   </note>
  </sect2>
  <sect2>
   <title>Block Mode</title>
   <para> Usually the build of a package gets blocked when a package required
    to build it is still building at the moment. The "block" attribute can
    modify this behaviour: </para>
   <variablelist>
    <varlistentry>
     <term>all</term>
     <listitem>
      <para> The default behavior, do not start the build if a dependant
       package is currently building. </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>local</term>
     <listitem>
      <para> Just care about packages in your project for the block mode.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>never</term>
     <listitem>
      <para> Never set a package to blocked. </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <note>
    <para> When using something other than <quote>all</quote> you will have to
     deal with the following problems: </para>
    <itemizedlist>
     <listitem>
      <para> Intermediate builds can have dependency and runtime problems.
      </para>
     </listitem>
     <listitem>
      <para> Your packages will get built more often, take more resources on
       the server side. As a result the dispatcher will rate your repository
       down. </para>
     </listitem>
    </itemizedlist>
   </note>
  </sect2>
  <sect2>
   <title>Follow Project Links</title>
   <variablelist>
    <varlistentry>
     <term>off</term>
     <listitem>
      <para> DEFAULT: do not build packages from project links </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>localdep</term>
     <listitem>
      <para> only build project linked packages if they depend on a local
       package </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>all</term>
     <listitem>
      <para> treat packages from project links like local packages </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
</chapter>
